/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  BasicSetting,
} from './utils/utils';
import {
  DropdownOption,
} from './components/cats-select/cats-select';

export namespace Components {
  interface CatsCard {
    /**
    * The text to be displayed on the card
    */
    'cardText': string;
    /**
    * The title for the card
    */
    'cardTitle': string;
    'changeState': (state: any) => Promise<void>;
    /**
    * If the card should be collapsed
    */
    'collapsible': boolean;
    /**
    * Settings to be shown in card
    */
    'settings': BasicSetting[];
  }
  interface CatsCheckbox {
    /**
    * Function to handle input change and affect state
    */
    'change': (event: Event) => void;
    /**
    * The current value for the checkbox
    */
    'checked': boolean;
    /**
    * The label for the checkbox
    */
    'label': string;
    /**
    * The tooltip for the checkbox
    */
    'tooltip': string;
  }
  interface CatsInput {
    /**
    * Function to handle input change and affect state
    */
    'change': (event: Event) => void;
    /**
    * The current value for the input
    */
    'current': string;
    /**
    * The label for the input
    */
    'label': string;
    /**
    * The tooltip for the input
    */
    'tooltip': string;
  }
  interface CatsSelect {
    /**
    * Function to handle select dropdown change and affect state
    */
    'change': (event: Event) => void;
    /**
    * The current value for the select dropdown
    */
    'current': string;
    /**
    * The label for the select dropdown
    */
    'label': string;
    /**
    * The options for the select dropdown
    */
    'options': DropdownOption[];
    /**
    * The tooltip for the select dropdown
    */
    'tooltip': string;
  }
  interface TestComponent {}
}

declare global {


  interface HTMLCatsCardElement extends Components.CatsCard, HTMLStencilElement {}
  var HTMLCatsCardElement: {
    prototype: HTMLCatsCardElement;
    new (): HTMLCatsCardElement;
  };

  interface HTMLCatsCheckboxElement extends Components.CatsCheckbox, HTMLStencilElement {}
  var HTMLCatsCheckboxElement: {
    prototype: HTMLCatsCheckboxElement;
    new (): HTMLCatsCheckboxElement;
  };

  interface HTMLCatsInputElement extends Components.CatsInput, HTMLStencilElement {}
  var HTMLCatsInputElement: {
    prototype: HTMLCatsInputElement;
    new (): HTMLCatsInputElement;
  };

  interface HTMLCatsSelectElement extends Components.CatsSelect, HTMLStencilElement {}
  var HTMLCatsSelectElement: {
    prototype: HTMLCatsSelectElement;
    new (): HTMLCatsSelectElement;
  };

  interface HTMLTestComponentElement extends Components.TestComponent, HTMLStencilElement {}
  var HTMLTestComponentElement: {
    prototype: HTMLTestComponentElement;
    new (): HTMLTestComponentElement;
  };
  interface HTMLElementTagNameMap {
    'cats-card': HTMLCatsCardElement;
    'cats-checkbox': HTMLCatsCheckboxElement;
    'cats-input': HTMLCatsInputElement;
    'cats-select': HTMLCatsSelectElement;
    'test-component': HTMLTestComponentElement;
  }
}

declare namespace LocalJSX {
  interface CatsCard {
    /**
    * The text to be displayed on the card
    */
    'cardText'?: string;
    /**
    * The title for the card
    */
    'cardTitle'?: string;
    /**
    * If the card should be collapsed
    */
    'collapsible'?: boolean;
    /**
    * Settings to be shown in card
    */
    'settings'?: BasicSetting[];
  }
  interface CatsCheckbox {
    /**
    * Function to handle input change and affect state
    */
    'change'?: (event: Event) => void;
    /**
    * The current value for the checkbox
    */
    'checked'?: boolean;
    /**
    * The label for the checkbox
    */
    'label'?: string;
    /**
    * The tooltip for the checkbox
    */
    'tooltip'?: string;
  }
  interface CatsInput {
    /**
    * Function to handle input change and affect state
    */
    'change'?: (event: Event) => void;
    /**
    * The current value for the input
    */
    'current'?: string;
    /**
    * The label for the input
    */
    'label'?: string;
    /**
    * The tooltip for the input
    */
    'tooltip'?: string;
  }
  interface CatsSelect {
    /**
    * Function to handle select dropdown change and affect state
    */
    'change'?: (event: Event) => void;
    /**
    * The current value for the select dropdown
    */
    'current'?: string;
    /**
    * The label for the select dropdown
    */
    'label'?: string;
    /**
    * The options for the select dropdown
    */
    'options'?: DropdownOption[];
    /**
    * The tooltip for the select dropdown
    */
    'tooltip'?: string;
  }
  interface TestComponent {}

  interface IntrinsicElements {
    'cats-card': CatsCard;
    'cats-checkbox': CatsCheckbox;
    'cats-input': CatsInput;
    'cats-select': CatsSelect;
    'test-component': TestComponent;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'cats-card': LocalJSX.CatsCard & JSXBase.HTMLAttributes<HTMLCatsCardElement>;
      'cats-checkbox': LocalJSX.CatsCheckbox & JSXBase.HTMLAttributes<HTMLCatsCheckboxElement>;
      'cats-input': LocalJSX.CatsInput & JSXBase.HTMLAttributes<HTMLCatsInputElement>;
      'cats-select': LocalJSX.CatsSelect & JSXBase.HTMLAttributes<HTMLCatsSelectElement>;
      'test-component': LocalJSX.TestComponent & JSXBase.HTMLAttributes<HTMLTestComponentElement>;
    }
  }
}


